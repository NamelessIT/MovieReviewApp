using MovieReviewApp.backend.Models;
using MovieReviewApp.backend.Data;
using Microsoft.EntityFrameworkCore;
using System.Diagnostics.CodeAnalysis;
using backend.DTOs;
namespace MovieReviewApp.backend.Repositories
{
    public class ReviewRepository : GenericRepository<Review>
    {
        public ReviewRepository(AppDbContext context) : base(context)
        {
        }
        public async Task<List<Review>> GetAllAsyncExceptDeleted()
        {
            return await _context.Set<Review>()
                .Where(r => !r.isDeleted)
                .ToListAsync();
        }

        public async Task<List<Review>> GetReviewsByFilmIdAsync(int filmId)
        {
            return await _context.Set<Review>()
                .Where(r => r.Film.Id == filmId && !r.isDeleted)
                .ToListAsync();
        }

        public async Task<List<Review>> GetReviewsByAccountIdAsync(int accountId)
        {
            return await _context.Set<Review>()
                .Where(r => r.Account.Id == accountId && !r.isDeleted)
                .ToListAsync();
        }

        // ‚úÖ L·∫•y Review m·ªõi nh·∫•t theo AccountId + FilmId
        private async Task<Review?> GetLatestReviewAsync(int accountId, int filmId)
        {
            return await _context.Reviews
                .Where(r => r.AccountId == accountId && r.MovieId == filmId && !r.isDeleted)
                .OrderByDescending(r => r.CreatedAt)
                .FirstOrDefaultAsync();
        }
                // ‚úÖ 4. L·∫•y review m·ªõi nh·∫•t (cho API /account/{accountId}/film/{filmId})
        public async Task<Review?> GetLatestReviewByAccountAndFilmAsync(int accountId, int filmId)
        {
            return await GetLatestReviewAsync(accountId, filmId);
        }

        public async Task<PaginatedResponse<ReviewAdminDTO>> GetReviewAdminWithPagination(int pageNumber, int pageSize, string? searchKeyword)
        {
            // IQueryable kh√¥ng th·ª±c thi ngay, n√≥ ch·ªâ x√¢y d·ª±ng c√¢u l·ªánh SQL
            // 1) Build base query and include navigation properties when projecting
            var baseQuery = _context.Set<Review>()
                .Where(r => r.Comment != null);

            // 2) Apply search if provided (search across film title, account name or comment)
            if (!string.IsNullOrEmpty(searchKeyword))
            {
                baseQuery = baseQuery.Where(r =>
                    (r.Film != null && r.Film.Title != null && r.Film.Title.Contains(searchKeyword))
                    || (r.Account != null && r.Account.Username.Contains(searchKeyword))
                    || (r.Comment != null && r.Comment.Contains(searchKeyword))
                );
            }

            // 3) Count total records for pagination
            var totalRecords = await baseQuery.CountAsync();

            // 4) Project to DTO (EF Core will translate navigation property access to JOINs)
            var data = await baseQuery
                .OrderByDescending(r => r.CreatedAt)
                .Skip((pageNumber - 1) * pageSize)
                .Take(pageSize)
                .Select(r => new ReviewAdminDTO
                {
                    Id = r.Id,
                    MovieId = r.MovieId,
                    MovieTitle = r.Film != null ? r.Film.Title : null,
                    AccountId = r.AccountId,
                    AccountName = r.Account != null ? r.Account.Username : null,
                    Rating = r.Rating,
                    Favorites = r.Favorites,
                    Comment = r.Comment,
                    CreatedAt = r.CreatedAt,
                    UpdatedAt = r.UpdatedAt,
                    isDeleted = r.isDeleted
                })
                .ToListAsync();

            return new PaginatedResponse<ReviewAdminDTO>
            {
                Data = data,
                TotalPages = (int)Math.Ceiling((double)totalRecords / pageSize),
                CurrentPage = pageNumber
            };
        }

        // L·∫•y review (c√≥ comment) theo filmId theo d·∫°ng ph√¢n trang cho UI ng∆∞·ªùi d√πng
        public async Task<PaginatedResponse<ReviewAdminDTO>> GetReviewsByFilmWithPagination(int filmId, int pageNumber, int pageSize)
        {
            if (pageNumber <= 0) pageNumber = 1;
            if (pageSize <= 0) pageSize = 10;

            var baseQuery = _context.Set<Review>()
                .Where(r => r.MovieId == filmId && !r.isDeleted && r.Comment != null);

            var totalRecords = await baseQuery.CountAsync();

            var data = await baseQuery
                .OrderByDescending(r => r.CreatedAt)
                .Skip((pageNumber - 1) * pageSize)
                .Take(pageSize)
                .Select(r => new ReviewAdminDTO
                {
                    Id = r.Id,
                    MovieId = r.MovieId,
                    MovieTitle = r.Film != null ? r.Film.Title : null,
                    AccountId = r.AccountId,
                    AccountName = r.Account != null ? r.Account.Username : null,
                    Rating = r.Rating,
                    Favorites = r.Favorites,
                    Comment = r.Comment,
                    CreatedAt = r.CreatedAt,
                    UpdatedAt = r.UpdatedAt,
                    isDeleted = r.isDeleted
                })
                .ToListAsync();

            return new PaginatedResponse<ReviewAdminDTO>
            {
                Data = data,
                TotalPages = (int)Math.Ceiling((double)totalRecords / pageSize),
                CurrentPage = pageNumber
            };
        }

        public override async Task DeleteAsync(int id)
        {
            var entity = await GetByIdAsync(id);
            if (entity != null)
            {
                entity.UpdatedAt = DateTime.UtcNow;
                entity.isDeleted = true;
                _context.Entry(entity).State = EntityState.Modified;
                await _context.SaveChangesAsync();
            }
        }


        public override async Task UpdateAsync(Review entity)
        {
            var existingReview = await GetByIdAsync(entity.Id);
            if (existingReview == null)
            {
                throw new KeyNotFoundException($"User with id {entity.Id} not found");
            }
            _context.Entry(existingReview).State = EntityState.Modified;
            await _context.SaveChangesAsync();
        }

        public async Task<int> CountAllReview()
        {
            return await _context.Set<Review>().CountAsync();
        }

        // ‚úÖ 1. Rating ‚Äî t·∫°o ho·∫∑c c·∫≠p nh·∫≠t tr√™n review m·ªõi nh·∫•t
        public async Task<Review> CreateOrUpdateRatingAsync(int accountId, int filmId, int rating)
        {
            if (rating < 1 || rating > 10)
                throw new ArgumentException("Rating must be between 1 and 10.");

            var latestReview = await GetLatestReviewAsync(accountId, filmId);

            if (latestReview == null)
            {
                // ‚ûï Ch∆∞a c√≥ review n√†o, t·∫°o m·ªõi
                latestReview = new Review
                {
                    AccountId = accountId,
                    MovieId = filmId,
                    Rating = rating,
                    Favorites = false,
                    Comment = string.Empty,
                    CreatedAt = DateTime.Now,
                    UpdatedAt = DateTime.Now,
                };
                await _context.Reviews.AddAsync(latestReview);
            }
            else if (string.IsNullOrEmpty(latestReview.Comment))
            {
                // üîÅ N·∫øu review m·ªõi nh·∫•t ch∆∞a c√≥ comment ‚Üí ch·ªâ update rating
                latestReview.Rating = rating;
                latestReview.UpdatedAt = DateTime.Now;
            }
            else
            {
                // üÜï N·∫øu review m·ªõi nh·∫•t ƒë√£ c√≥ comment ‚Üí t·∫°o review m·ªõi, copy d·ªØ li·ªáu c≈©
                var newReview = new Review
                {
                    AccountId = accountId,
                    MovieId = filmId,
                    Rating = rating,
                    Favorites = latestReview.Favorites,
                    Comment = string.Empty,
                    CreatedAt = DateTime.Now,
                    UpdatedAt = DateTime.Now,
                };
                await _context.Reviews.AddAsync(newReview);
            }

            await _context.SaveChangesAsync();
            return latestReview ?? throw new Exception("Unexpected error saving review.");
        }

        // ‚úÖ 2. Favorites ‚Äî t·∫°o ho·∫∑c c·∫≠p nh·∫≠t tr√™n review m·ªõi nh·∫•t
        public async Task<Review> CreateOrUpdateFavoritesAsync(int accountId, int filmId, bool favorites)
        {
            var latestReview = await GetLatestReviewAsync(accountId, filmId);

            if (latestReview == null)
            {
                latestReview = new Review
                {
                    AccountId = accountId,
                    MovieId = filmId,
                    Rating = 0,
                    Favorites = favorites,
                    Comment = string.Empty,
                    CreatedAt = DateTime.Now,
                    UpdatedAt = DateTime.Now,
                };
                await _context.Reviews.AddAsync(latestReview);
            }
            else if (string.IsNullOrEmpty(latestReview.Comment))
            {
                latestReview.Favorites = favorites;
                latestReview.UpdatedAt = DateTime.Now;
            }
            else
            {
                var newReview = new Review
                {
                    AccountId = accountId,
                    MovieId = filmId,
                    Rating = latestReview.Rating,
                    Favorites = favorites,
                    Comment = string.Empty,
                    CreatedAt = DateTime.Now,
                    UpdatedAt = DateTime.Now,
                };
                await _context.Reviews.AddAsync(newReview);
            }

            await _context.SaveChangesAsync();
            return latestReview;
        }
        // ‚úÖ 5. L·∫•y danh s√°ch phim y√™u th√≠ch (ch·ªâ l·∫•y review m·ªõi nh·∫•t theo MovieId + AccountId)
        public async Task<List<Review>> GetAllFavoritesReviewsAsync(int accountId)
        {
            // L·ªçc review y√™u th√≠ch (Favorites = true, ch∆∞a x√≥a)
            var favoriteReviews = await _context.Reviews
                .Where(r => r.AccountId == accountId && r.Favorites == true && !r.isDeleted)
                .GroupBy(r => r.MovieId) // nh√≥m theo phim
                .Select(g => g.OrderByDescending(r => r.CreatedAt).First()) // l·∫•y review m·ªõi nh·∫•t
                .ToListAsync();

            return favoriteReviews;
        }

        // ‚úÖ 3. Comment ‚Äî t·∫°o ho·∫∑c c·∫≠p nh·∫≠t, n·∫øu c√≥ comment m·ªõi th√¨ lu√¥n t·∫°o b·∫£n ghi m·ªõi
        public async Task<Review> CreateOrUpdateCommentAsync(int accountId, int filmId, string comment)
        {
            var latestReview = await GetLatestReviewAsync(accountId, filmId);

            if (latestReview == null)
            {
                // ‚ûï T·∫°o m·ªõi
                var newReview = new Review
                {
                    AccountId = accountId,
                    MovieId = filmId,
                    Rating = 0,
                    Favorites = false,
                    Comment = comment,
                    CreatedAt = DateTime.Now,
                    UpdatedAt = DateTime.Now
                };
                await _context.Reviews.AddAsync(newReview);
            }
            else
            {
                // üÜï Lu√¥n t·∫°o m·ªõi khi c√≥ comment m·ªõi
                var newReview = new Review
                {
                    AccountId = accountId,
                    MovieId = filmId,
                    Rating = latestReview.Rating,
                    Favorites = latestReview.Favorites,
                    Comment = comment,
                    CreatedAt = DateTime.Now,
                    UpdatedAt = DateTime.Now
                };
                await _context.Reviews.AddAsync(newReview);
            }

            await _context.SaveChangesAsync();
            return await GetLatestReviewAsync(accountId, filmId)
                ?? throw new Exception("Error saving review comment.");
        }


        // ‚úÖ 5. T√≠nh ƒëi·ªÉm trung b√¨nh (ch·ªâ l·∫•y rating c·ªßa review m·ªõi nh·∫•t m·ªói AccountId)
        public async Task<List<FilmRatingDTO>> GetAverageRatings()
        {
            // L·∫•y review m·ªõi nh·∫•t m·ªói (AccountId, MovieId)
            var latestRatings = await _context.Reviews
                .Where(r => !r.isDeleted && r.Rating > 0)
                .GroupBy(r => new { r.AccountId, r.MovieId })
                .Select(g => g.OrderByDescending(r => r.CreatedAt).First())
                .ToListAsync();

            // T√≠nh trung b√¨nh theo MovieId
            var result = latestRatings
                .GroupBy(r => r.MovieId)
                .Select(g => new FilmRatingDTO
                {
                    MovieId = g.Key,
                    Title = "Unknown", // ho·∫∑c ƒë·ªÉ null, tu·ª≥ b·∫°n
                    AverageRating = g.Average(r => r.Rating)
                })
                .OrderByDescending(dto => dto.AverageRating)
                .Take(7)
                .ToList();

            return result;
        }


        public async Task<List<FilmReviewCountDTO>> GetFilmReviewCounts()
        {
            // 1. LEFT JOIN: EF Core t·ª± ƒë·ªông x·ª≠ l√Ω JOIN khi s·ª≠ d·ª•ng Navigation Property
            // 2. GROUP BY: Nh√≥m theo MovieId v√† Title
            var result = await _context.Set<Film>()
                .Select(f => new FilmReviewCountDTO
                {
                    // 3. SELECT & AVG: T√≠nh ƒëi·ªÉm trung b√¨nh v√† √°nh x·∫°
                    Title = f.Title,
                    TotalReview = f.Reviews.Count()
                })
                // 4. ORDER BY: S·∫Øp x·∫øp theo ƒëi·ªÉm trung b√¨nh gi·∫£m d·∫ßn (desc)
                .OrderByDescending(dto => dto.TotalReview)
                // l·∫•y 7 b·∫£n ghi
                .Take(7)
                // 5. TO LIST: Th·ª±c thi truy v·∫•n v√† tr·∫£ v·ªÅ List
                .ToListAsync();
            return result;
        }
    }
}